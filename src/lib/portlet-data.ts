export type PortletFile = {
  id: string;
  name: string;
  type: 'file';
  path: string;
  content: string;
};

export type PortletFolder = {
  id: string;
  name: string;
  type: 'folder';
  path: string;
  children: PortletEntry[];
};

export type PortletEntry = PortletFile | PortletFolder;

const viewJspContent = `<%@ page contentType="text/html" %>
<%@ taglib uri="http://java.sun.com/portlet_2_0" prefix="portlet" %>

<portlet:defineObjects />

<div class="portlet-plus-container">
    <h1 class="portlet-plus-title">Welcome to Portlet Plus</h1>
    <p class="portlet-plus-text">This is a sample portlet generated by Portlet Plus.</p>
    <button class="portlet-plus-button">Click Me</button>
</div>
`;

const portletXmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<portlet-app xmlns="http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd"
             version="2.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd">
    <portlet>
        <portlet-name>PortletPlus</portlet-name>
        <display-name>Portlet Plus</display-name>
        <portlet-class>com.example.PortletPlus</portlet-class>
        <init-param>
            <name>view-template</name>
            <value>/view.jsp</value>
        </init-param>
        <supports>
            <mime-type>text/html</mime-type>
        </supports>
        <portlet-info>
            <title>Portlet Plus</title>
            <short-title>Portlet+</short-title>
        </portlet-info>
    </portlet>
</portlet-app>
`;

const webXmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>Portlet Plus Project</display-name>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
`;

const mainCssContent = `/* Portlet Plus Styles */
.portlet-plus-container {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 8px;
}

.portlet-plus-title {
    color: #333;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.portlet-plus-text {
    color: #555;
    font-size: 1rem;
    margin-bottom: 1rem;
}

.portlet-plus-button {
    background-color: #6699CC; /* primary color */
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.portlet-plus-button:hover {
    background-color: #5588bb;
}
`;


export const initialProject: PortletFolder = {
  id: 'root',
  name: 'portlet-plus-project',
  type: 'folder',
  path: 'portlet-plus-project',
  children: [
    {
      id: 'web-inf',
      name: 'WEB-INF',
      type: 'folder',
      path: 'portlet-plus-project/WEB-INF',
      children: [
        { id: 'portlet.xml', name: 'portlet.xml', type: 'file', path: 'portlet-plus-project/WEB-INF/portlet.xml', content: portletXmlContent },
        { id: 'web.xml', name: 'web.xml', type: 'file', path: 'portlet-plus-project/WEB-INF/web.xml', content: webXmlContent },
      ]
    },
    {
      id: 'css',
      name: 'css',
      type: 'folder',
      path: 'portlet-plus-project/css',
      children: [
        { id: 'main.css', name: 'main.css', type: 'file', path: 'portlet-plus-project/css/main.css', content: mainCssContent },
      ]
    },
    { id: 'view.jsp', name: 'view.jsp', type: 'file', path: 'portlet-plus-project/view.jsp', content: viewJspContent },
  ]
};

export function findFileById(node: PortletEntry, id: string): PortletFile | null {
  if (node.type === 'file' && node.id === id) {
    return node;
  }
  if (node.type === 'folder') {
    for (const child of node.children) {
      const found = findFileById(child, id);
      if (found) {
        return found;
      }
    }
  }
  return null;
}

export function updateFileContent(node: PortletFolder, id: string, content: string): PortletFolder {
    const updateRecursively = (entries: PortletEntry[]): PortletEntry[] => {
        return entries.map(entry => {
            if (entry.type === 'file' && entry.id === id) {
                return { ...entry, content };
            }
            if (entry.type === 'folder') {
                return { ...entry, children: updateRecursively(entry.children) };
            }
            return entry;
        });
    };
    return { ...node, children: updateRecursively(node.children) };
}
